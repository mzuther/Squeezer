{# ========================================================================== #}
{#                                                                            #}
{#  FrutJUCE                                                                  #}
{#  ========                                                                  #}
{#  Common classes for use with the JUCE library                              #}
{#                                                                            #}
{#  Copyright (c) 2010-2021 Martin Zuther (http://www.mzuther.de/)            #}
{#                                                                            #}
{#  This program is free software: you can redistribute it and/or modify      #}
{#  it under the terms of the GNU General Public License as published by      #}
{#  the Free Software Foundation, either version 3 of the License, or         #}
{#  (at your option) any later version.                                       #}
{#                                                                            #}
{#  This program is distributed in the hope that it will be useful,           #}
{#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #}
{#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #}
{#  GNU General Public License for more details.                              #}
{#                                                                            #}
{#  You should have received a copy of the GNU General Public License         #}
{#  along with this program.  If not, see <http://www.gnu.org/licenses/>.     #}
{#                                                                            #}
{#  Thank you for using free software!                                        #}
{#                                                                            #}
{# ========================================================================== #}

{%- import 'frut.jinja' as frut -%}
{%- import 'settings.jinja' as settings -%}

{# ========================================================================== #}

{%- macro render_preamble(copyright) %}
#! /usr/bin/env bash

{% for line in copyright -%}
#  {{ line }}
{% endfor %}


###############################################################################
#
#  WARNING: this file was auto-generated, please do not edit!
#
###############################################################################

binary_dir="./final"


function finalise_binary
{
    input_file=$1
    output_file="$binary_dir/$input_file"

    if [ -f "./$input_file" ]; then
        if [ ! -f "$output_file" ] || [ "./$input_file" -nt "$output_file" ]; then
            printf "  Finalising binary:   %s -->\n" "$input_file"
            printf "                       %s\n"     "$output_file"

            mkdir -p "$(dirname "./$output_file")"
            cp "./$input_file" "./$output_file"

            printf "\n"
        fi
    fi
}


function finalise_symbols
{
    input_file=$1
    output_file="$binary_dir/debug_symbols/$input_file"

    if [ -f "./$input_file" ]; then
        if [ ! -f "$output_file" ] || [ "./$input_file" -nt "$output_file" ]; then
            printf "  Finalising symbols:  %s -->\n" "$input_file"
            printf "                       %s\n"     "$output_file"

            mkdir -p "$(dirname "./$output_file")"
            cp "./$input_file" "./$output_file"

            printf "\n"
        fi
    fi
}


printf "\n  === Finalising binaries ===\n\n"

mkdir -p "$binary_dir/debug_symbols"

{% endmacro -%}

{# -------------------------------------------------------------------------- #}

{%- macro render_postamble() %}
printf "  Done.\n\n\n"
{% endmacro -%}

{# -------------------------------------------------------------------------- #}

{%- macro render_standalone_linux(project, target, platform) %}
finalise_binary  "standalone/{{ target.binary_linux }}{{platform}}"
{% endmacro -%}

{# -------------------------------------------------------------------------- #}

{%- macro render_lv2_linux(project, target, platform) %}
finalise_binary  "lv2/{{ target.binary_linux }}{{platform}}.so"
{% endmacro -%}

{# -------------------------------------------------------------------------- #}

{%- macro render_vst2_linux(project, target, platform) %}
finalise_binary  "vst2/{{ target.binary_linux }}{{platform}}.so"
{% endmacro -%}

{# -------------------------------------------------------------------------- #}

{%- macro render_vst3_linux(project, target, platform) %}
{% if platform == '_x64' %}
finalise_binary  "vst3/{{ project.name }}.vst3/Contents/x86_64-linux/{{ project.name }}.so"
{% else %}
finalise_binary  "vst3/{{ project.name }}.vst3/Contents/i386-linux/{{ project.name }}.so"
{% endif %}
{% endmacro -%}

{# -------------------------------------------------------------------------- #}

{%- macro render_standalone_windows(project, target, platform) %}
finalise_binary  "standalone/{{ target.binary_windows }}{{platform}}.exe"
finalise_symbols "standalone/{{ target.binary_windows }}{{platform}}.pdb"
{% endmacro -%}

{# -------------------------------------------------------------------------- #}

{%- macro render_vst2_windows(project, target, platform) %}
finalise_binary  "vst2/{{ target.binary_windows }}{{platform}}.dll"
finalise_symbols "vst2/{{ target.binary_windows }}{{platform}}.pdb"
{% endmacro -%}

{# -------------------------------------------------------------------------- #}

{%- macro render_vst3_windows(project, target, platform) %}
finalise_binary  "vst3/{{ project.name }}.vst3/Contents/x86{{ platform | replace (' x', '_') }}-win/{{ project.name }}.vst3"
finalise_symbols "vst3/{{ project.name }}.vst3/Contents/x86{{ platform | replace (' x', '_') }}-win/{{ project.name }}.pdb"
{% endmacro -%}

{# ========================================================================== #}

{{- render_preamble(settings.copyright) -}}


{% for platform in ['_x64', ] -%}

{% for target in settings.targets.standalone %}
{{ render_standalone_linux(settings.project, target, platform) -}}
{% endfor %}

{% for target in settings.targets.lv2 %}
{{ render_lv2_linux(settings.project, target, platform) -}}
{% endfor %}

{% for target in settings.targets.vst2 %}
{{ render_vst2_linux(settings.project, target, platform) -}}
{% endfor %}

{% for target in settings.targets.vst3 %}
{{ render_vst3_linux(settings.project, target, platform) -}}
{% endfor %}

{% endfor -%}


{% for platform in ['', ' x64'] -%}

{% for target in settings.targets.standalone %}
{{ render_standalone_windows(settings.project, target, platform) -}}
{% endfor %}

{% for target in settings.targets.vst2 %}
{{ render_vst2_windows(settings.project, target, platform) -}}
{% endfor %}

{% for target in settings.targets.vst3 %}
{{ render_vst3_windows(settings.project, target, platform) -}}
{% endfor %}

{% endfor %}

{{- render_postamble() -}}

{# ========================================================================== #}
